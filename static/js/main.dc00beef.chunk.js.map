{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","handleClick","window","location","reload","state","loading","dataURL","bgColor","this","randomColor","setState","x","Math","floor","random","y","z","icon","faSpinner","className","document","body","style","backgroundColor","styles","float","border","cross","color","fontSize","id","title","width","src","type","onClick","faCross","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"sQAwEeA,E,kDA7Db,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IA0BNC,YAAc,WACZC,OAAOC,SAASC,QAAO,IA1BzB,EAAKC,MAAQ,CACXC,SAAS,EACTC,QAAS,6CACTC,QAAS,IALM,E,qDASnB,WACEC,KAAKC,cACLD,KAAKE,SAAS,CACZL,SAAS,EACTC,QAAS,iD,yBAIb,WACE,IAAMK,EAAIC,KAAKC,MAAsB,IAAhBD,KAAKE,UACpBC,EAAIH,KAAKC,MAAsB,IAAhBD,KAAKE,UACpBE,EAAIJ,KAAKC,MAAsB,IAAhBD,KAAKE,UACpBP,EAAO,cAAUI,EAAV,YAAeI,EAAf,YAAoBC,EAApB,KACbR,KAAKE,SAAS,CACZH,c,oBAQF,WAEE,GADoBC,KAAKJ,MAAjBC,QACK,OAAO,8BAAK,cAAC,IAAD,CAAiBY,KAAMC,IAAWC,UAAU,qBACrEC,SAASC,KAAKC,MAAMC,gBAAkBf,KAAKJ,MAAMG,QAEjD,IAAMiB,EAAS,CACbD,gBAAiBf,KAAKJ,MAAMG,QAC5BkB,MAAO,QACPC,OAAQ,QAGJC,EAAQ,CACZC,MAAOpB,KAAKJ,MAAMG,SAGpB,OACEa,SAASC,KAAKC,MAAMO,SAAW,OAC7B,qBAAKC,GAAG,OAAR,SACE,sBAAKA,GAAG,kBAAR,UACE,qBAAKA,GAAG,OAAR,SAAe,wBAAQA,GAAG,QAAQC,MAAM,yBAAyBT,MAAO,CAAEU,MAAO,QAAUC,IAAKzB,KAAKJ,MAAME,YAC3G,sBAAKwB,GAAG,iBAAR,UACE,wBAAQI,KAAK,SAASf,UAAU,kBAAkBgB,QAAS3B,KAAKR,YAAasB,MAAOE,EAApF,uBACA,cAAC,IAAD,CAAiBP,KAAMmB,IAASd,MAAOK,EAAOR,UAAU,sB,GAtDtDkB,aCIHC,EAdS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAEnB,IADLC,EACI,EADJA,OAAQC,EACJ,EADIA,OAAQC,EACZ,EADYA,OAAQC,EACpB,EADoBA,OAAQC,EAC5B,EAD4BA,QAEhCJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OAEP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF7B,SAAS8B,eAAe,SAM1BZ,M","file":"static/js/main.dc00beef.chunk.js","sourcesContent":["/* eslint-disable no-return-assign */\n/* eslint-disable react/destructuring-assignment */\n/* eslint-disable react/jsx-filename-extension */\n/* eslint-disable react/sort-comp */\n/* eslint-disable no-use-before-define */\nimport React, { Component } from 'react';\nimport './App.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCross, faSpinner } from '@fortawesome/free-solid-svg-icons';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: true,\n      dataURL: 'https://labs.bible.org/api/?passage=random',\n      bgColor: '',\n    };\n  }\n\n  componentDidMount() {\n    this.randomColor();\n    this.setState({\n      loading: false,\n      dataURL: 'https://labs.bible.org/api/?passage=random',\n    });\n  }\n\n  randomColor() {\n    const x = Math.floor(Math.random() * 256);\n    const y = Math.floor(Math.random() * 256);\n    const z = Math.floor(Math.random() * 256);\n    const bgColor = `rgb(${x},${y},${z})`;\n    this.setState({\n      bgColor,\n    });\n  }\n\n    handleClick = () => {\n      window.location.reload(false);\n    }\n\n    render() {\n      const { loading } = this.state;\n      if (loading) return <div><FontAwesomeIcon icon={faSpinner} className=\"fa-pulse fa-5x\" /></div>;\n      document.body.style.backgroundColor = this.state.bgColor;\n\n      const styles = {\n        backgroundColor: this.state.bgColor,\n        float: 'right',\n        border: 'none',\n      };\n\n      const cross = {\n        color: this.state.bgColor,\n      };\n\n      return (\n        document.body.style.fontSize = '30px',\n          <div id=\"main\">\n            <div id=\"verse-container\">\n              <div id=\"wrap\"><iframe id=\"verse\" title=\"This is a unique title\" style={{ width: '100%' }} src={this.state.dataURL} /></div>\n              <div id=\"flex-container\">\n                <button type=\"button\" className=\"btn btn-primary\" onClick={this.handleClick} style={styles}>New verse</button>\n                <FontAwesomeIcon icon={faCross} style={cross} className=\"fa-2x\" />\n              </div>\n            </div>\n          </div>\n      );\n    }\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// eslint-disable-next-line no-use-before-define\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  // eslint-disable-next-line react/jsx-filename-extension\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}